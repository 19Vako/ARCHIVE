const mongoose = require("mongoose");
const express = require("express");
require("dotenv").config();
const bcrypt = require("bcrypt");
const upload = require("./upload");
const path = require("path");
const fs = require("fs");
const cors = require("cors");
const { ManagerScheme, DocCardScheme, AdminScheme } = require("./schemas");
const { error } = require("console");

const env = process.env;
const app = express();

app.use(cors()); 
app.use(express.static("pdf-files"));
app.use('/pdf-files', express.static(path.join(__dirname, 'pdf-files')));
app.use(express.json());


mongoose.connect(env.MONGO_URL, { dbName: "Document-archive"})
   .then(() => {
       console.log("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∞!");
       app.listen(env.PORT, () => {
          console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–∏–π –Ω–∞ http://localhost:${env.PORT}`);                                                          
       })
   })
   .catch((err) => {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑—î–¥–Ω–∞–Ω–Ω—è –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö: ", err);
      process.exit(1);
   });




app.post(env.ADD_ADMIN, async (req, res) => {
    try {
      const { name, password } = req.body;

      if (!name || !password) {
         return res.status(400).json({ error: "‚ùå –í—Å—ñ –ø–æ–ª—è –º–∞—é—Ç—å –±—É—Ç–∏ –∑–∞–ø–æ–≤–Ω–µ–Ω–∏–º–∏!" });
      }

      const existUser = await AdminScheme.findOne({ name: name });

      if (existUser) {
         return res.status(400).json({ error: "‚ùå –ê–¥–º—ñ–Ω –∑ —Ç–∞–∫–∏–º —ñ–º–µ–Ω–µ–º –≤–∂–µ —ñ—Å–Ω—É—î!" });
      }

      const hashedPassword = await bcrypt.hash(password, 10);
      await AdminScheme.create({
         name: name,
         password: hashedPassword,
      });

      res.status(201).json({ message: "‚úÖ –ê–¥–º—ñ–Ω —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π!" });

    } catch (err) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ", err)
        res.status(500).json({ error: "‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞!" })
    }  
});
app.post(env.ADMIN_LOG_IN, async (req, res) => {
   try {
     const { name, password } = req.body;
     if (!name || !password) {
        return res.status(400).json({ error: "‚ùå –Ü–º'—è —Ç–∞ –ø–∞—Ä–æ–ª—å —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º–∏!" });
     }

     const admin = await AdminScheme.findOne({ name: name });
     if (!admin) {
        return res.status(400).json({ error: "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–µ —ñ–º'—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∞–±–æ –ø–∞—Ä–æ–ª—å" });
     }

     const isPasswordValid = await bcrypt.compare(password, admin.password);
     if (!isPasswordValid) {
        return res.status(400).json({ error: "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø–∞—Ä–æ–ª—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞" });
     }

     const { password: _, ...adminData } = admin._doc;
     res.status(200).json({ message: "‚úÖ –í—Ö—ñ–¥ —É—Å–ø—ñ—à–Ω–∏–π!", data: adminData });
   } catch (err) {
     console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É:", err);
     res.status(500).json({ error: "‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
   }
});
app.post(env.ADD_MANAGER, async (req, res) => {
   try {
     const { name, password } = req.body;

     if (!name || !password) {
        return res.status(400).json({ error: "‚ùå –Ü–º'—è —Ç–∞ –ø–∞—Ä–æ–ª—å —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º–∏!" });
     }

     const existUser = await ManagerScheme.findOne({ name: name });

     if (existUser) {
        return res.status(400).json({ error: "‚ùå –ú–µ–Ω–µ–¥–∂–µ—Ä –≤–∂–µ —ñ—Å–Ω—É—î!" });
     }

     const hashedPassword = await bcrypt.hash(password, 10);
     await ManagerScheme.create({
        name: name,
        password: hashedPassword,
        adminPassword: password,
     });

     res.status(201).json({ message: "‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π!" });

   } catch (err) {
       console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞: ", err);
       res.status(500).json({ error: "‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
   }  
});
app.post(env.DELETE_MANAGER, async (req, res) => {
   try {
     const { name } = req.body;

     const existManager = await ManagerScheme.findOne({ name:name });
     if (!existManager) {
        return res.status(404).json({ error: "‚ùå –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ —ñ—Å–Ω—É—î!" });
     }

     await ManagerScheme.deleteOne({ name:name });
     res.status(200).json({ message: "‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤–∏–¥–∞–ª–µ–Ω–æ!" });
     
   } catch (err) {
     console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞: ", err);
     res.status(500).json({ error: "‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
   }                                                     
});
app.post(env.FIND_MANAGER, async (req, res) => {
   try {
     const { name } = req.body
     const managers = await ManagerScheme.find({ name: { $regex: name, $options: 'i' } })

     if(!managers.length){
      return res.status(404).json({ error: "‚ùå –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π!" })
     }

     res.status(200).json({ message: "‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä —É—Å–ø—ñ—à–Ω–æ –∑–Ω–∞–π–¥–µ–Ω–∏–π!", managers:managers })
   } catch (err) {
     console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞!")
     res.status(500).json({ error: "‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞!" })
   }
})
app.post(env.FIND_CHANGE_MANAGER, async (req, res) => {
   try {
     const { _id, changedName, changedPassword } = req.body;

     const manager = await ManagerScheme.findOne({ _id:_id });
     if (manager.name === changedName && manager.adminPassword === changedPassword) {
        return res.status(400).json({ error: "‚ùå –î–∞–Ω—ñ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–µ –±—É–ª–∏ –∑–º—ñ–Ω–µ–Ω—ñ!" });
     }

     const hashedPassword = await bcrypt.hash(changedPassword, 10);
     await ManagerScheme.findOneAndUpdate({ _id:_id }, { name:changedName, password:hashedPassword, adminPassword:changedPassword }, { new:true });
     res.status(200).json({ message: "‚úÖ –î–∞–Ω—ñ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ–Ω–æ–≤–ª–µ–Ω–æ!" });

   } catch (err) {
     console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ –¥–∞–Ω–∏—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–∞: ", err);
     res.status(500).json({ error: "‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
   }
});
app.get(env.GET_MANAGERS, async (_, res) => {
  try {
     const managers = await ManagerScheme.find();
     if (!managers) {
        return res.status(200).json({ message: "‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π!" });
     }
     res.status(200).json({ message: "‚úÖ –í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ —Å–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤!", managers });
  } catch (err) {
     console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –º–µ–Ω–µ–¥–∂–µ—Ä—ñ–≤: ", err);
     res.status(500).json({ error: "‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});





app.post(env.MANAGER_LOG_IN, async (req, res) => {
   try {
      const { name, password } = req.body;
      if (!name || !password) {
         return res.status(400).json({ error: "‚ùå –Ü–º'—è —Ç–∞ –ø–∞—Ä–æ–ª—å —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º–∏!" });
      }

      const manager = await ManagerScheme.findOne({ name: name });
      if (!manager) {
         return res.status(400).json({ error: "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–µ —ñ–º'—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–±–æ –ø–∞—Ä–æ–ª—å" });
      }

      const isPasswordValid = await bcrypt.compare(password, manager.password);
      if (!isPasswordValid) {
         return res.status(400).json({ error: "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–µ —ñ–º'—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∞–±–æ –ø–∞—Ä–æ–ª—å" });
      }
     
      res.status(200).json({ message: "‚úÖ –í—Ö—ñ–¥ —É—Å–ø—ñ—à–Ω–∏–π!", data: manager.name });
   } catch (err) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Ö–æ–¥—É:", err);
      res.status(500).json({ error: "‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
   }
});
app.post(env.ADD_CARD_ADDITION, upload.single("docPDF"), async (req, res) => {
   try {
      const {
           docId,
           docType,
           docNumber,
           docCreateDate,
           docSigningDate,
           name,
           validityPeriod,
           organizationName,
           organisationCode,
           counterpartyName,
           counterpartyCode,
           content,
           contractType,
           addition,
           author,
           createDate,
      } = req.body;

      if (!req.file) {
         return res.status(400).json({ message: "‚ùå –§–∞–π–ª –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ" });
      }
      if (!req.file.mimetype.includes("pdf")) {
         return res.status(400).json({ error: "‚ùå –î–æ–∑–≤–æ–ª–µ–Ω—ñ –ª–∏—à–µ PDF-—Ñ–∞–π–ª–∏" });
      }

      if (Object.values({ 
         docType, docNumber, docCreateDate, docSigningDate, name, validityPeriod, 
         organizationName, organisationCode, counterpartyName, counterpartyCode, 
         content, contractType, author, createDate 
      }).some(value => !value)) {
         fs.unlinkSync(req.file.path);
         return res.status(400).json({ error: "‚ùå –ó–∞–ø–æ–≤–Ω–µ–Ω—ñ –Ω–µ –≤—Å—ñ –ø–æ–ª—è!" });
      }

      const docCard = await DocCardScheme.create({
           docType: docType,
           docNumber: docNumber,
           docPDF: req.file.filename,
           docCreateDate: docCreateDate,
           docSigningDate: docSigningDate,
           name: name,
           validityPeriod: validityPeriod,
           organizationName: organizationName,
           organisationCode: organisationCode,
           counterpartyName: counterpartyName,
           counterpartyCode: counterpartyCode,
           content: content,
           contractType: contractType,
           addition: addition,
           author: author,
           createDate: createDate,
      });

      if(docId){
         await DocCardScheme.updateOne({_id:docId}, {$push:{addition:docCard._id}}); // –ø–µ—Ä–µ–¥–∞—î–º–æ id –¥–æ–¥–∞—Ç–∫—É
         await DocCardScheme.updateOne({_id:docCard._id}, {$push:{addition:docId}}); // –ø–µ—Ä–µ–¥–∞—î–º–æ id –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ—ó –∫–∞—Ä—Ç–∫–∏
         return res.status(201).json({ message: "‚úÖ –î–æ–¥–∞—Ç–æ–∫ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!" });
      }

      return res.status(201).json({ message: "‚úÖ –ö–∞—Ä—Ç–∫—É —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!" });
   } catch (err) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏: ", err);
      res.status(500).json({ error: "‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
   }
});
app.get(env.GET_CARDS, async (_, res) => {
   try {
      const cards = await DocCardScheme.find()
      if(!cards.length){
         return res.status(404).json({ error: "‚ùå –ê—Ä—Ö—ñ–≤ –¥–æ–≥–æ–≤–æ—Ä—ñ–≤ –ø—É—Å—Ç–∏–π!"})
      }
      res.status(200).json({ message: "‚úÖ –£—Å–ø—ñ—à–Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –¥–∞–Ω–∏—Ö!", cards})
   } catch (err) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫–∞ –∫–∞—Ä—Ç–æ–∫ –¥–æ–≥–æ–≤–æ—Ä—ñ–≤!")
      res.status(500).json({ error: "‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" })
   }
})
app.post(env.FIND_CARDS, async (req, res) => {
   try {
     const {
       docType,
       docNumber,
       docCreateDate,
       docSigningDate,
       name,
       validityPeriod,
       organizationName,
       organisationCode,
       counterpartyName,
       counterpartyCode,
       content,
       contractType,
       addition,
       author,
       createDate,
     } = req.body;
 
     // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, –ø–µ—Ä–µ–¥–∞–Ω–∏—Ö —á–∏ –ø–µ—Ä–µ–¥–∞–Ω—ñ —Ñ—ñ–ª—å—Ç—Ä–∏
     if (!Object.values(req.body).some(val => val)) { 
       return res.status(400).json({ error: "‚ùå –í–≤–µ–¥—ñ—Ç—å —Ñ—ñ–ª—å—Ç—Ä–∏!" });
     }
 
     // –î–∏–Ω–∞–º—ñ—á–Ω–∞ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è
     const filter = Object.fromEntries(
      Object.entries({
        docType, docNumber, docCreateDate, docSigningDate, name, validityPeriod,
        organizationName, organisationCode, counterpartyName, counterpartyCode,
        content, contractType, addition, author, createDate
      }).filter(([_, value]) => value)
    );
    
 
     const findedCards = await DocCardScheme.find(filter);
 
     if (!findedCards.length) {
       return res.status(404).json({ error: '‚ùå –ö–∞—Ä—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!' });
     }
 
     res.status(200).json({ message: "‚úÖ –ö–∞—Ä—Ç–∫–∏ —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω—ñ!", data: findedCards });
 
   } catch (err) {
     console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É –¥–æ–∫—É–º–µ–Ω—Ç—É!', err);
     res.status(500).json({ error: "‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞!" });
   }
}); 
app.post(env.DELETE_CARD, async (req, res) => {
   try {
      const { docId } = req.body;

      const docCard = await DocCardScheme.findById(docId);
      if (!docCard) {
         return res.status(404).json({ error: "‚ùå –î–æ–∫—É–º–µ–Ω—Ç–Ω–∞ –∫–∞—Ä—Ç–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!" });
      }
      
      await DocCardScheme.deleteOne({ _id: docId });
      fs.unlink(path.join(__dirname, 'pdf-files', docCard.docPDF), (err) => {
         if (err) {
            return res.status(400).json({ error: "‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É: " + err });
         }
      });

      res.status(200).json({ message: "‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–Ω—É –∫–∞—Ä—Ç–∫—É —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!" });
   } catch (err) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏: ", err);
      res.status(500).json({ error: "‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
   }
});
app.post(env.UPDATE_CARD, upload.single("docPDF"), async (req, res) => {
   try {
     const {
       docId,
       docType,
       docNumber,
       docCreateDate,
       docSigningDate,
       name,
       validityPeriod,
       organizationName,
       organisationCode,
       counterpartyName,
       counterpartyCode,
       content,
       contractType,
       author,
       createDate,
     } = req.body;
 
     const cardDoc = await DocCardScheme.findOne({ _id: docId });
     if (!cardDoc) {
       return res.status(400).json({ error: "‚ùå –ö–∞—Ä—Ç–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!" });
     }
 
     const updateFields = Object.fromEntries(
      Object.entries({ 
        docType, docNumber, docCreateDate, docSigningDate, name, validityPeriod, 
        organizationName, organisationCode, counterpartyName, counterpartyCode, 
        content, contractType, author, createDate 
      }).filter(([key, value]) => value && value !== cardDoc[key])
    );
   

     if (req.file) {
         fs.unlink(path.join(__dirname, 'pdf-files', cardDoc.docPDF), (err) => {
            if (err) {
               return res.status(400).json({ error: "‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É: " + err });
            }
         });
         updateFields.docPDF = req.file.filename;
     }
     if (Object.keys(updateFields).length === 0) {
       return res.status(400).json({ message: "‚ùå –ñ–æ–¥–Ω–µ –ø–æ–ª–µ –Ω–µ –±—É–ª–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!" });
     }
 
     const updatedCard = await DocCardScheme.findOneAndUpdate(
       { _id: docId },
       { $set: updateFields },
       { new: true }
     );
 
     return res.status(200).json({ message: "‚úÖ –ö–∞—Ä—Ç–∫—É —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!", data: updatedCard });
   } catch (err) {
     console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞—Ä—Ç–∫–∏:", err);
     return res.status(500).json({ error: "‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
   }
});


